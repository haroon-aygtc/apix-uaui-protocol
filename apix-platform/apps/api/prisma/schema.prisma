// APIX Real-Time Backend Database Schema
// Production-grade schema with multi-tenant isolation

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum ClientType {
  WEB_APP
  MOBILE_APP
  SDK_WIDGET
  API_CLIENT
  INTERNAL_SERVICE
}

enum ConnectionStatus {
  CONNECTED
  DISCONNECTED
  RECONNECTING
  SUSPENDED
}

enum ChannelType {
  AGENT_EVENTS
  TOOL_EVENTS
  WORKFLOW_EVENTS
  PROVIDER_EVENTS
  SYSTEM_EVENTS
  PRIVATE_USER
  ORGANIZATION
}

enum AuditSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AuditCategory {
  AUTHENTICATION
  AUTHORIZATION
  DATA_ACCESS
  DATA_MODIFICATION
  SYSTEM_ACCESS
  SECURITY_EVENT
  COMPLIANCE
  PERFORMANCE
}

// Organization model for multi-tenant isolation
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users         User[]
  connections   ApiXConnection[]
  events        ApiXEvent[]
  channels      ApiXChannel[]
  subscriptions ApiXSubscription[]
  auditLogs     AuditLog[]
  roles         Role[]
  quotas        TenantQuota?
  sessions      Session[]
  encryption    TenantEncryption?

  @@map("organizations")
}

// User model
model User {
  id             String   @id @default(cuid())
  email          String   @unique
  username       String?  @unique
  firstName      String?
  lastName       String?
  avatar         String?
  passwordHash   String   // Added for authentication
  isActive       Boolean  @default(true)
  isEmailVerified Boolean @default(false)
  emailVerificationToken String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  lastLoginAt    DateTime?
  failedLoginAttempts Int @default(0)
  lockedUntil    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Multi-tenant
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  connections    ApiXConnection[]
  events         ApiXEvent[]
  subscriptions  ApiXSubscription[]
  auditLogs      AuditLog[]
  userRoles      UserRole[]
  sessions       Session[]

  @@map("users")
}

// Core APIX Connection model
model ApiXConnection {
  id            String            @id @default(cuid())
  sessionId     String            @unique
  clientType    ClientType
  status        ConnectionStatus  @default(CONNECTED)
  channels      String[]          // Array of subscribed channels
  metadata      Json?
  connectedAt   DateTime          @default(now())
  lastHeartbeat DateTime          @default(now())
  disconnectedAt DateTime?

  // Multi-tenant isolation
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Optional user association
  userId         String?
  user           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Relations
  events         ApiXEvent[]

  @@index([organizationId, status])
  @@index([sessionId])
  @@index([userId])
  @@map("apix_connections")
}

// Core APIX Event model
model ApiXEvent {
  id            String   @id @default(cuid())
  eventType     String
  channel       String
  payload       Json
  acknowledgment Boolean  @default(false)
  retryCount    Int      @default(0)
  processed     Boolean  @default(false)
  createdAt     DateTime @default(now())
  processedAt   DateTime?
  metadata      Json?

  // Multi-tenant isolation
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Optional associations
  connectionId   String?
  connection     ApiXConnection? @relation(fields: [connectionId], references: [id], onDelete: SetNull)

  userId         String?
  user           User?           @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([organizationId, eventType])
  @@index([channel, createdAt])
  @@index([connectionId])
  @@index([processed, createdAt])
  @@map("apix_events")
}

// Channel management model
model ApiXChannel {
  id          String      @id @default(cuid())
  name        String
  type        ChannelType
  description String?
  permissions Json?       // Channel-specific permissions
  settings    Json?       // Channel configuration
  isActive    Boolean     @default(true)
  subscribers Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Multi-tenant isolation
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, name])
  @@index([organizationId, type])
  @@index([name])
  @@map("apix_channels")
}

// Audit Log model for compliance and monitoring
model AuditLog {
  id             String        @id @default(cuid())
  organizationId String
  userId         String?
  action         String        // CREATE, READ, UPDATE, DELETE, LOGIN, LOGOUT, etc.
  resourceType   String        // User, Connection, Event, Channel, etc.
  resourceId     String?
  oldValues      Json?         // Previous state for updates
  newValues      Json?         // New state for creates/updates
  success        Boolean       @default(true)
  error          String?       // Error message if failed
  ipAddress      String?
  userAgent      String?
  sessionId      String?
  timestamp      DateTime      @default(now())
  severity       AuditSeverity @default(LOW)
  category       AuditCategory @default(DATA_ACCESS)
  metadata       Json?         // Additional context

  // Multi-tenant isolation
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?        @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([organizationId, timestamp])
  @@index([organizationId, category, timestamp])
  @@index([organizationId, resourceType, timestamp])
  @@index([userId, timestamp])
  @@map("audit_logs")
}

// Role-based access control
model Role {
  id             String   @id @default(cuid())
  name           String   // admin, user, viewer, etc.
  description    String?
  permissions    String[] // Array of permission strings
  level          RoleLevel @default(VIEWER) // Role hierarchy level
  isSystem       Boolean  @default(false) // System roles cannot be deleted
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String?  // User ID who created this role

  // Multi-tenant isolation
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  userRoles      UserRole[]

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([organizationId, level])
  @@map("roles")
}

// Role hierarchy levels
enum RoleLevel {
  SUPER_ADMIN
  ORG_ADMIN
  DEVELOPER
  VIEWER
}

// User role assignments
model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  assignedAt DateTime @default(now())
  assignedBy String?  // User ID who assigned this role
  expiresAt  DateTime?
  isActive   Boolean  @default(true)
  scope      Json?    // Optional scope for role (e.g., specific projects, departments)

  // Relations
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@index([userId, isActive])
  @@map("user_roles")
}

// Tenant resource limits and quotas
model TenantQuota {
  id             String   @id @default(cuid())
  organizationId String   @unique

  // Resource limits
  maxUsers       Int      @default(100)
  maxConnections Int      @default(1000)
  maxEvents      Int      @default(10000)
  maxChannels    Int      @default(100)
  maxStorage     BigInt   @default(1073741824) // 1GB in bytes
  maxApiCalls    Int      @default(10000) // per hour

  // Feature flags
  features       String[] // Array of enabled features

  // Usage tracking
  currentUsers       Int @default(0)
  currentConnections Int @default(0)
  currentEvents      Int @default(0)
  currentChannels    Int @default(0)
  currentStorage     BigInt @default(0)
  currentApiCalls    Int @default(0)

  // Timestamps
  lastResetAt    DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@map("tenant_quotas")
}

// Session management for enhanced security
model Session {
  id             String   @id @default(cuid())
  sessionToken   String   @unique
  userId         String
  organizationId String
  ipAddress      String?
  userAgent      String?
  isActive       Boolean  @default(true)
  lastActivity   DateTime @default(now())
  expiresAt      DateTime
  createdAt      DateTime @default(now())

  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@index([sessionToken])
  @@index([expiresAt])
  @@map("sessions")
}

// Tenant-specific encryption keys
model TenantEncryption {
  id             String   @id @default(cuid())
  organizationId String   @unique
  keyId          String   @unique
  encryptedKey   String   // Encrypted with master key
  algorithm      String   @default("AES-256-GCM")
  keyVersion     Int      @default(1)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  rotatedAt      DateTime?

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([keyId])
  @@map("tenant_encryption")
}

// Subscription model for channel subscriptions
model ApiXSubscription {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  channel        String
  filters        Json?    // Subscription filters (event types, metadata, etc.)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Multi-tenant isolation
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId, channel])
  @@index([organizationId])
  @@index([userId])
  @@index([organizationId, channel])
  @@index([organizationId, userId])
  @@map("apix_subscriptions")
}
